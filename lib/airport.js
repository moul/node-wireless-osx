// Generated by CoffeeScript 1.4.0
(function() {
  var Airport, EventEmitter, exec, plist, spawn, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

  EventEmitter = require('events').EventEmitter;

  plist = require('plist');

  Airport = (function(_super) {

    __extends(Airport, _super);

    function Airport(options) {
      var _base, _base1, _ref1, _ref2;
      this.options = options != null ? options : {};
      this.getinfo = __bind(this.getinfo, this);

      this.scan = __bind(this.scan, this);

      this._execAndParse = __bind(this._execAndParse, this);

      this._parse = __bind(this._parse, this);

      this._exec = __bind(this._exec, this);

      if ('string' === typeof this.options) {
        this.options = {
          iface: this.options
        };
      }
      if ((_ref1 = (_base = this.options).airport_bin) == null) {
        _base.airport_bin = '/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport';
      }
      if ((_ref2 = (_base1 = this.options).iface) == null) {
        _base1.iface = 'en0';
      }
    }

    Airport.prototype._exec = function(args, fn) {
      var command;
      command = "" + this.options.airport_bin + " " + (args.join(' '));
      return exec(command, fn);
    };

    Airport.prototype._parse = function(buffer, fn) {
      try {
        return fn(false, plist.parseStringSync(buffer));
      } catch (e) {
        return fn(true, e);
      }
    };

    Airport.prototype._execAndParse = function(args, fn) {
      var _this = this;
      return this._exec(args, function(err, stdout, stderr) {
        return _this._parse(stdout, fn);
      });
    };

    Airport.prototype.scan = function(arg, fn) {
      if (arg == null) {
        arg = '';
      }
      if (fn == null) {
        fn = null;
      }
      if ('function' === typeof arg) {
        fn = arg;
        arg = '';
      }
      return this._execAndParse(["--scan" + arg, "--xml"], fn);
    };

    Airport.prototype.getinfo = function(fn) {
      return this._execAndParse(["--getinfo", "--xml"], fn);
    };

    return Airport;

  })(EventEmitter);

  module.exports = {
    Airport: Airport
  };

}).call(this);
